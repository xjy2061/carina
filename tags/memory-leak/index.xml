<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Memory leak on Carina</title>
    <link>https://xjy2061.github.io/carina/tags/memory-leak/</link>
    <description>Recent content in Memory leak on Carina</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Sep 2017 20:09:00 +0800</lastBuildDate><atom:link href="https://xjy2061.github.io/carina/tags/memory-leak/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Android memory leak</title>
      <link>https://xjy2061.github.io/carina/post/android-memory-leak/</link>
      <pubDate>Sun, 10 Sep 2017 20:09:00 +0800</pubDate>
      
      <guid>https://xjy2061.github.io/carina/post/android-memory-leak/</guid>
      <description>Leak because of system bug PhoneStateListener leak Below 7.0 a non static inner class IPhoneStateListener.Stub callback in PhoneStateListener references to outside PhoneStateListener, even caller has been destroyed and &amp;ldquo;un-registered&amp;rdquo; the PhoneStateListener, the references coming from: Native Stack &amp;ndash;&amp;gt; PhoneStateListener &amp;ndash;&amp;gt; Context(Activity).
A wrapper class wraps a weak reference of PhoneStateListener can be used to avoid this memory leak.
Caution: The original PhoneStateListener object must be referenced by caller class, otherwise the weak reference in the wrapper class will get null.</description>
    </item>
    
  </channel>
</rss>
